### YamlMime:TSType
name: PublicClientApplication
uid: '@azure/msal-node.PublicClientApplication'
package: '@azure/msal-node'
summary: >-
  This class is to be used to acquire tokens for public client applications
  (desktop, mobile). Public client applications

  are not trusted to safely store application secrets, and therefore can only
  request tokens in the name of an user.
fullName: PublicClientApplication
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: PublicClientApplication(Configuration)
    uid: '@azure/msal-node.PublicClientApplication.constructor'
    package: '@azure/msal-node'
    summary: >-
      Important attributes in the Configuration object for auth are:

      - clientID: the application ID of your application. You can obtain one by
      registering your application with our Application registration portal.

      - authority: the authority URL for your application.


      AAD authorities are of the form
      https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}.

      - If your application supports Accounts in one organizational directory,
      replace "Enter_the_Tenant_Info_Here" value with the Tenant Id or Tenant
      name (for example, contoso.microsoft.com).

      - If your application supports Accounts in any organizational directory,
      replace "Enter_the_Tenant_Info_Here" value with organizations.

      - If your application supports Accounts in any organizational directory
      and personal Microsoft accounts, replace "Enter_the_Tenant_Info_Here"
      value with common.

      - To restrict support to Personal Microsoft accounts only, replace
      "Enter_the_Tenant_Info_Here" value with consumers.


      Azure B2C authorities are of the form
      https://{instance}/{tenant}/{policy}. Each policy is considered

      its own authority. You will have to set the all of the knownAuthorities at
      the time of the client application

      construction.


      ADFS authorities are of the form https://{instance}/adfs.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new PublicClientApplication(configuration: Configuration)'
      parameters:
        - id: configuration
          type: <xref uid="@azure/msal-node.Configuration" />
          description: ''
inheritedMethods:
  - name: acquireTokenByCode(AuthorizationCodeRequest, AuthorizationCodePayload)
    uid: '@azure/msal-node.PublicClientApplication.acquireTokenByCode'
    package: '@azure/msal-node'
    summary: >-
      Acquires a token by exchanging the Authorization Code received from the
      first step of OAuth2.0

      Authorization Code flow.


      `getAuthCodeUrl(AuthorizationCodeUrlRequest)` can be used to create the
      URL for the first step of OAuth2.0

      Authorization Code flow. Ensure that values for redirectUri and scopes in
      AuthorizationCodeUrlRequest and

      AuthorizationCodeRequest are the same.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenByCode(request: AuthorizationCodeRequest,
        authCodePayLoad?: AuthorizationCodePayload):
        Promise<AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.AuthorizationCodeRequest" />
          description: ''
        - id: authCodePayLoad
          type: <xref uid="@azure/msal-node.AuthorizationCodePayload" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/msal-node.AuthenticationResult" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ClientApplication.acquireTokenByCode](xref:@azure/msal-node.ClientApplication.acquireTokenByCode)
  - name: acquireTokenByRefreshToken(RefreshTokenRequest)
    uid: '@azure/msal-node.PublicClientApplication.acquireTokenByRefreshToken'
    package: '@azure/msal-node'
    summary: >-
      Acquires a token by exchanging the refresh token provided for a new set of
      tokens.


      This API is provided only for scenarios where you would like to migrate
      from ADAL to MSAL. Otherwise, it is

      recommended that you use `acquireTokenSilent()` for silent scenarios. When
      using `acquireTokenSilent()`, MSAL will

      handle the caching and refreshing of tokens automatically.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenByRefreshToken(request: RefreshTokenRequest):
        Promise<null | AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.RefreshTokenRequest" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;null | <xref uid="@azure/msal-node.AuthenticationResult"
          />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ClientApplication.acquireTokenByRefreshToken](xref:@azure/msal-node.ClientApplication.acquireTokenByRefreshToken)
  - name: acquireTokenByUsernamePassword(UsernamePasswordRequest)
    uid: '@azure/msal-node.PublicClientApplication.acquireTokenByUsernamePassword'
    package: '@azure/msal-node'
    summary: >-
      Acquires tokens with password grant by exchanging client applications
      username and password for credentials


      The latest OAuth 2.0 Security Best Current Practice disallows the password
      grant entirely.

      More details on this recommendation at
      https://tools.ietf.org/html/draft-ietf-oauth-security-topics-13#section-3.4

      Microsoft's documentation and recommendations are at:

      https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-authentication-flows#usernamepassword
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: '- Use a more secure flow instead'
    syntax:
      content: >-
        function acquireTokenByUsernamePassword(request:
        UsernamePasswordRequest): Promise<null | AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.UsernamePasswordRequest" />
          description: UsenamePasswordRequest
      return:
        description: ''
        type: >-
          Promise&lt;null | <xref uid="@azure/msal-node.AuthenticationResult"
          />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ClientApplication.acquireTokenByUsernamePassword](xref:@azure/msal-node.ClientApplication.acquireTokenByUsernamePassword)
  - name: clearCache()
    uid: '@azure/msal-node.PublicClientApplication.clearCache'
    package: '@azure/msal-node'
    summary: Clear the cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: function clearCache()
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ClientApplication.clearCache](xref:@azure/msal-node.ClientApplication.clearCache)
  - name: getAuthCodeUrl(AuthorizationUrlRequest)
    uid: '@azure/msal-node.PublicClientApplication.getAuthCodeUrl'
    package: '@azure/msal-node'
    summary: >-
      Creates the URL of the authorization request, letting the user input
      credentials and consent to the

      application. The URL targets the /authorize endpoint of the authority
      configured in the

      application object.


      Once the user inputs their credentials and consents, the authority will
      send a response to the redirect URI

      sent in the request and should contain an authorization code, which can
      then be used to acquire tokens via

      `acquireTokenByCode(AuthorizationCodeRequest)`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAuthCodeUrl(request: AuthorizationUrlRequest):
        Promise<string>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.AuthorizationUrlRequest" />
          description: ''
      return:
        description: ''
        type: Promise&lt;string&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ClientApplication.getAuthCodeUrl](xref:@azure/msal-node.ClientApplication.getAuthCodeUrl)
  - name: getLogger()
    uid: '@azure/msal-node.PublicClientApplication.getLogger'
    package: '@azure/msal-node'
    summary: Returns the logger instance
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getLogger(): Logger'
      return:
        description: ''
        type: <xref uid="@azure/msal-node.Logger" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ClientApplication.getLogger](xref:@azure/msal-node.ClientApplication.getLogger)
  - name: getTokenCache()
    uid: '@azure/msal-node.PublicClientApplication.getTokenCache'
    package: '@azure/msal-node'
    summary: Gets the token cache for the application.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getTokenCache(): TokenCache'
      return:
        description: ''
        type: <xref uid="@azure/msal-node.TokenCache" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ClientApplication.getTokenCache](xref:@azure/msal-node.ClientApplication.getTokenCache)
  - name: setLogger(Logger)
    uid: '@azure/msal-node.PublicClientApplication.setLogger'
    package: '@azure/msal-node'
    summary: >-
      Replaces the default logger set in configurations with new Logger with new
      configurations
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setLogger(logger: Logger)'
      parameters:
        - id: logger
          type: <xref uid="@azure/msal-node.Logger" />
          description: Logger instance
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ClientApplication.setLogger](xref:@azure/msal-node.ClientApplication.setLogger)
methods:
  - name: acquireTokenByDeviceCode(DeviceCodeRequest)
    uid: '@azure/msal-node.PublicClientApplication.acquireTokenByDeviceCode'
    package: '@azure/msal-node'
    summary: >-
      Acquires a token from the authority using OAuth2.0 device code flow.

      This flow is designed for devices that do not have access to a browser or
      have input constraints.

      The authorization server issues a DeviceCode object with a verification
      code, an end-user code,

      and the end-user verification URI. The DeviceCode object is provided
      through a callback, and the end-user should be

      instructed to use another device to navigate to the verification URI to
      input credentials.

      Since the client cannot receive incoming requests, it polls the
      authorization server repeatedly

      until the end-user completes input of credentials.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenByDeviceCode(request: DeviceCodeRequest):
        Promise<null | AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.DeviceCodeRequest" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;null | <xref uid="@azure/msal-node.AuthenticationResult"
          />&gt;
  - name: acquireTokenInteractive(InteractiveRequest)
    uid: '@azure/msal-node.PublicClientApplication.acquireTokenInteractive'
    package: '@azure/msal-node'
    summary: >-
      Acquires a token interactively via the browser by requesting an
      authorization code then exchanging it for a token.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenInteractive(request: InteractiveRequest):
        Promise<AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.InteractiveRequest" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/msal-node.AuthenticationResult" />&gt;
  - name: acquireTokenSilent(SilentFlowRequest)
    uid: '@azure/msal-node.PublicClientApplication.acquireTokenSilent'
    package: '@azure/msal-node'
    summary: >-
      Returns a token retrieved either from the cache or by exchanging the
      refresh token for a fresh access token. If brokering is enabled the token
      request will be serviced by the broker.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenSilent(request: SilentFlowRequest):
        Promise<AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.SilentFlowRequest" />
          description: developer provided SilentFlowRequest
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/msal-node.AuthenticationResult" />&gt;
  - name: getAllAccounts()
    uid: '@azure/msal-node.PublicClientApplication.getAllAccounts'
    package: '@azure/msal-node'
    summary: >-
      Returns all cached accounts for this application. If brokering is enabled
      this request will be serviced by the broker.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getAllAccounts(): Promise<AccountInfo[]>'
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/msal-node.AccountInfo" />[]&gt;
  - name: signOut(SignOutRequest)
    uid: '@azure/msal-node.PublicClientApplication.signOut'
    package: '@azure/msal-node'
    summary: Removes cache artifacts associated with the given account
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function signOut(request: SignOutRequest): Promise<void>'
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.SignOutRequest" />
          description: developer provided SignOutRequest
      return:
        description: ''
        type: Promise&lt;void&gt;
extends: <xref uid="@azure/msal-node.ClientApplication" />
