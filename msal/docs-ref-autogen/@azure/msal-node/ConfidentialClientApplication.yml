### YamlMime:TSType
name: ConfidentialClientApplication
uid: '@azure/msal-node.ConfidentialClientApplication'
package: '@azure/msal-node'
summary: >-
  This class is to be used to acquire tokens for confidential client
  applications (webApp, webAPI). Confidential client applications
   will configure application secrets, client certificates/assertions as applicable
fullName: ConfidentialClientApplication
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: ConfidentialClientApplication(Configuration)
    uid: '@azure/msal-node.ConfidentialClientApplication.constructor'
    package: '@azure/msal-node'
    summary: >-
      Constructor for the ConfidentialClientApplication


      Required attributes in the Configuration object are:

      - clientID: the application ID of your application. You can obtain one by
      registering your application with our application registration portal

      - authority: the authority URL for your application.

      - client credential: Must set either client secret, certificate, or
      assertion for confidential clients. You can obtain a client secret from
      the application registration portal.


      In Azure AD, authority is a URL indicating of the form
      https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}.

      If your application supports Accounts in one organizational directory,
      replace "Enter_the_Tenant_Info_Here" value with the Tenant Id or Tenant
      name (for example, contoso.microsoft.com).

      If your application supports Accounts in any organizational directory,
      replace "Enter_the_Tenant_Info_Here" value with organizations.

      If your application supports Accounts in any organizational directory and
      personal Microsoft accounts, replace "Enter_the_Tenant_Info_Here" value
      with common.

      To restrict support to Personal Microsoft accounts only, replace
      "Enter_the_Tenant_Info_Here" value with consumers.


      In Azure B2C, authority is of the form
      https://{instance}/tfp/{tenant}/{policyName}/

      Full B2C functionality will be available in this library in future
      versions.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new ConfidentialClientApplication(configuration: Configuration)'
      parameters:
        - id: configuration
          type: <xref uid="@azure/msal-node.Configuration" />
          description: ''
inheritedMethods:
  - name: acquireTokenByCode(AuthorizationCodeRequest, AuthorizationCodePayload)
    uid: '@azure/msal-node.ConfidentialClientApplication.acquireTokenByCode'
    package: '@azure/msal-node'
    summary: >-
      Acquires a token by exchanging the Authorization Code received from the
      first step of OAuth2.0

      Authorization Code flow.


      `getAuthCodeUrl(AuthorizationCodeUrlRequest)` can be used to create the
      URL for the first step of OAuth2.0

      Authorization Code flow. Ensure that values for redirectUri and scopes in
      AuthorizationCodeUrlRequest and

      AuthorizationCodeRequest are the same.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenByCode(request: AuthorizationCodeRequest,
        authCodePayLoad?: AuthorizationCodePayload):
        Promise<AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.AuthorizationCodeRequest" />
          description: ''
        - id: authCodePayLoad
          type: <xref uid="@azure/msal-node.AuthorizationCodePayload" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/msal-node.AuthenticationResult" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ClientApplication.acquireTokenByCode](xref:@azure/msal-node.ClientApplication.acquireTokenByCode)
  - name: acquireTokenByRefreshToken(RefreshTokenRequest)
    uid: '@azure/msal-node.ConfidentialClientApplication.acquireTokenByRefreshToken'
    package: '@azure/msal-node'
    summary: >-
      Acquires a token by exchanging the refresh token provided for a new set of
      tokens.


      This API is provided only for scenarios where you would like to migrate
      from ADAL to MSAL. Otherwise, it is

      recommended that you use `acquireTokenSilent()` for silent scenarios. When
      using `acquireTokenSilent()`, MSAL will

      handle the caching and refreshing of tokens automatically.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenByRefreshToken(request: RefreshTokenRequest):
        Promise<null | AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.RefreshTokenRequest" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;null | <xref uid="@azure/msal-node.AuthenticationResult"
          />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ClientApplication.acquireTokenByRefreshToken](xref:@azure/msal-node.ClientApplication.acquireTokenByRefreshToken)
  - name: acquireTokenByUsernamePassword(UsernamePasswordRequest)
    uid: >-
      @azure/msal-node.ConfidentialClientApplication.acquireTokenByUsernamePassword
    package: '@azure/msal-node'
    summary: >-
      Acquires tokens with password grant by exchanging client applications
      username and password for credentials


      The latest OAuth 2.0 Security Best Current Practice disallows the password
      grant entirely.

      More details on this recommendation at
      https://tools.ietf.org/html/draft-ietf-oauth-security-topics-13#section-3.4

      Microsoft's documentation and recommendations are at:

      https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-authentication-flows#usernamepassword
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: '- Use a more secure flow instead'
    syntax:
      content: >-
        function acquireTokenByUsernamePassword(request:
        UsernamePasswordRequest): Promise<null | AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.UsernamePasswordRequest" />
          description: UsenamePasswordRequest
      return:
        description: ''
        type: >-
          Promise&lt;null | <xref uid="@azure/msal-node.AuthenticationResult"
          />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ClientApplication.acquireTokenByUsernamePassword](xref:@azure/msal-node.ClientApplication.acquireTokenByUsernamePassword)
  - name: acquireTokenSilent(SilentFlowRequest)
    uid: '@azure/msal-node.ConfidentialClientApplication.acquireTokenSilent'
    package: '@azure/msal-node'
    summary: >-
      Acquires a token silently when a user specifies the account the token is
      requested for.


      This API expects the user to provide an account object and looks into the
      cache to retrieve the token if present.

      There is also an optional "forceRefresh" boolean the user can send to
      bypass the cache for access_token and id_token.

      In case the refresh_token is expired or not found, an error is thrown

      and the guidance is for the user to call any interactive token acquisition
      API (eg: `acquireTokenByCode()`).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenSilent(request: SilentFlowRequest):
        Promise<AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.SilentFlowRequest" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/msal-node.AuthenticationResult" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ClientApplication.acquireTokenSilent](xref:@azure/msal-node.ClientApplication.acquireTokenSilent)
  - name: clearCache()
    uid: '@azure/msal-node.ConfidentialClientApplication.clearCache'
    package: '@azure/msal-node'
    summary: Clear the cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: function clearCache()
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ClientApplication.clearCache](xref:@azure/msal-node.ClientApplication.clearCache)
  - name: getAuthCodeUrl(AuthorizationUrlRequest)
    uid: '@azure/msal-node.ConfidentialClientApplication.getAuthCodeUrl'
    package: '@azure/msal-node'
    summary: >-
      Creates the URL of the authorization request, letting the user input
      credentials and consent to the

      application. The URL targets the /authorize endpoint of the authority
      configured in the

      application object.


      Once the user inputs their credentials and consents, the authority will
      send a response to the redirect URI

      sent in the request and should contain an authorization code, which can
      then be used to acquire tokens via

      `acquireTokenByCode(AuthorizationCodeRequest)`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAuthCodeUrl(request: AuthorizationUrlRequest):
        Promise<string>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.AuthorizationUrlRequest" />
          description: ''
      return:
        description: ''
        type: Promise&lt;string&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ClientApplication.getAuthCodeUrl](xref:@azure/msal-node.ClientApplication.getAuthCodeUrl)
  - name: getLogger()
    uid: '@azure/msal-node.ConfidentialClientApplication.getLogger'
    package: '@azure/msal-node'
    summary: Returns the logger instance
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getLogger(): Logger'
      return:
        description: ''
        type: <xref uid="@azure/msal-node.Logger" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ClientApplication.getLogger](xref:@azure/msal-node.ClientApplication.getLogger)
  - name: getTokenCache()
    uid: '@azure/msal-node.ConfidentialClientApplication.getTokenCache'
    package: '@azure/msal-node'
    summary: Gets the token cache for the application.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getTokenCache(): TokenCache'
      return:
        description: ''
        type: <xref uid="@azure/msal-node.TokenCache" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ClientApplication.getTokenCache](xref:@azure/msal-node.ClientApplication.getTokenCache)
  - name: setLogger(Logger)
    uid: '@azure/msal-node.ConfidentialClientApplication.setLogger'
    package: '@azure/msal-node'
    summary: >-
      Replaces the default logger set in configurations with new Logger with new
      configurations
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setLogger(logger: Logger)'
      parameters:
        - id: logger
          type: <xref uid="@azure/msal-node.Logger" />
          description: Logger instance
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ClientApplication.setLogger](xref:@azure/msal-node.ClientApplication.setLogger)
methods:
  - name: acquireTokenByClientCredential(ClientCredentialRequest)
    uid: >-
      @azure/msal-node.ConfidentialClientApplication.acquireTokenByClientCredential
    package: '@azure/msal-node'
    summary: >-
      Acquires tokens from the authority for the application (not for an end
      user).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenByClientCredential(request:
        ClientCredentialRequest): Promise<null | AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.ClientCredentialRequest" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;null | <xref uid="@azure/msal-node.AuthenticationResult"
          />&gt;
  - name: acquireTokenOnBehalfOf(OnBehalfOfRequest)
    uid: '@azure/msal-node.ConfidentialClientApplication.acquireTokenOnBehalfOf'
    package: '@azure/msal-node'
    summary: >-
      Acquires tokens from the authority for the application.


      Used in scenarios where the current app is a middle-tier service which was
      called with a token

      representing an end user. The current app can use the token (oboAssertion)
      to request another

      token to access downstream web API, on behalf of that user.


      The current middle-tier app has no user interaction to obtain consent.

      See how to gain consent upfront for your middle-tier app from this
      article.

      https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#gaining-consent-for-the-middle-tier-application
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenOnBehalfOf(request: OnBehalfOfRequest):
        Promise<null | AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.OnBehalfOfRequest" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;null | <xref uid="@azure/msal-node.AuthenticationResult"
          />&gt;
  - name: SetAppTokenProvider(IAppTokenProvider)
    uid: '@azure/msal-node.ConfidentialClientApplication.SetAppTokenProvider'
    package: '@azure/msal-node'
    summary: >-
      This extensibility point only works for the client_credential flow, i.e.
      acquireTokenByClientCredential and

      is meant for Azure SDK to enhance Managed Identity support.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function SetAppTokenProvider(provider: IAppTokenProvider)'
      parameters:
        - id: provider
          type: <xref uid="@azure/msal-node.IAppTokenProvider" />
          description: ''
extends: <xref uid="@azure/msal-node.ClientApplication" />
