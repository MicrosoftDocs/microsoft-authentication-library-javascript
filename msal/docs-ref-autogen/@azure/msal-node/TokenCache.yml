### YamlMime:TSType
name: TokenCache
uid: '@azure/msal-node.TokenCache'
package: '@azure/msal-node'
summary: In-memory token cache manager
fullName: TokenCache
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: TokenCache(NodeStorage, Logger, ICachePlugin)
    uid: '@azure/msal-node.TokenCache.constructor'
    package: '@azure/msal-node'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new TokenCache(storage: NodeStorage, logger: Logger, cachePlugin?:
        ICachePlugin)
      parameters:
        - id: storage
          type: NodeStorage
          description: ''
        - id: logger
          type: <xref uid="@azure/msal-node.Logger" />
          description: ''
        - id: cachePlugin
          type: <xref uid="@azure/msal-node.ICachePlugin" />
          description: ''
properties:
  - name: persistence
    uid: '@azure/msal-node.TokenCache.persistence'
    package: '@azure/msal-node'
    summary: ''
    fullName: persistence
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'persistence: ICachePlugin'
      return:
        description: ''
        type: <xref uid="@azure/msal-node.ICachePlugin" />
methods:
  - name: deserialize(string)
    uid: '@azure/msal-node.TokenCache.deserialize'
    package: '@azure/msal-node'
    summary: >-
      Deserializes JSON to in-memory cache. JSON should be in MSAL cache schema
      format
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function deserialize(cache: string)'
      parameters:
        - id: cache
          type: string
          description: blob formatted cache
  - name: getAccountByHomeId(string)
    uid: '@azure/msal-node.TokenCache.getAccountByHomeId'
    package: '@azure/msal-node'
    summary: |-
      Returns the signed in account matching homeAccountId.
      (the account object is created at the time of successful login)
      or null when no matching account is found
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAccountByHomeId(homeAccountId: string): Promise<null |
        AccountInfo>
      parameters:
        - id: homeAccountId
          type: string
          description: unique identifier for an account (uid.utid)
      return:
        description: ''
        type: Promise&lt;null | <xref uid="@azure/msal-node.AccountInfo" />&gt;
  - name: getAccountByLocalId(string)
    uid: '@azure/msal-node.TokenCache.getAccountByLocalId'
    package: '@azure/msal-node'
    summary: |-
      Returns the signed in account matching localAccountId.
      (the account object is created at the time of successful login)
      or null when no matching account is found
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAccountByLocalId(localAccountId: string): Promise<null |
        AccountInfo>
      parameters:
        - id: localAccountId
          type: string
          description: >-
            unique identifier of an account (sub/obj when homeAccountId cannot
            be populated)
      return:
        description: ''
        type: Promise&lt;null | <xref uid="@azure/msal-node.AccountInfo" />&gt;
  - name: getAllAccounts()
    uid: '@azure/msal-node.TokenCache.getAllAccounts'
    package: '@azure/msal-node'
    summary: API that retrieves all accounts currently in cache to the user
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getAllAccounts(): Promise<AccountInfo[]>'
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/msal-node.AccountInfo" />[]&gt;
  - name: getCacheSnapshot()
    uid: '@azure/msal-node.TokenCache.getCacheSnapshot'
    package: '@azure/msal-node'
    summary: Gets cache snapshot in CacheKVStore format
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getCacheSnapshot(): CacheKVStore'
      return:
        description: ''
        type: <xref uid="@azure/msal-node.CacheKVStore" />
  - name: getKVStore()
    uid: '@azure/msal-node.TokenCache.getKVStore'
    package: '@azure/msal-node'
    summary: Fetches the cache key-value map
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getKVStore(): CacheKVStore'
      return:
        description: ''
        type: <xref uid="@azure/msal-node.CacheKVStore" />
  - name: hasChanged()
    uid: '@azure/msal-node.TokenCache.hasChanged'
    package: '@azure/msal-node'
    summary: >-
      Set to true if cache state has changed since last time serialize or
      writeToPersistence was called
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function hasChanged(): boolean'
      return:
        description: ''
        type: boolean
  - name: overwriteCache()
    uid: '@azure/msal-node.TokenCache.overwriteCache'
    package: '@azure/msal-node'
    summary: Overwrites in-memory cache with persistent cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function overwriteCache(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: removeAccount(AccountInfo)
    uid: '@azure/msal-node.TokenCache.removeAccount'
    package: '@azure/msal-node'
    summary: API to remove a specific account and the relevant data from cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeAccount(account: AccountInfo): Promise<void>'
      parameters:
        - id: account
          type: <xref uid="@azure/msal-node.AccountInfo" />
          description: AccountInfo passed by the user
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: serialize()
    uid: '@azure/msal-node.TokenCache.serialize'
    package: '@azure/msal-node'
    summary: Serializes in memory cache to JSON
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function serialize(): string'
      return:
        description: ''
        type: string
