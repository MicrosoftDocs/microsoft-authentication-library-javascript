### YamlMime:TSType
name: ClientApplication
uid: '@azure/msal-node.ClientApplication'
package: '@azure/msal-node'
summary: Base abstract class for all ClientApplications - public and confidential
fullName: ClientApplication
remarks: ''
isDeprecated: false
type: class
methods:
  - name: acquireTokenByCode(AuthorizationCodeRequest, AuthorizationCodePayload)
    uid: '@azure/msal-node.ClientApplication.acquireTokenByCode'
    package: '@azure/msal-node'
    summary: >-
      Acquires a token by exchanging the Authorization Code received from the
      first step of OAuth2.0

      Authorization Code flow.


      `getAuthCodeUrl(AuthorizationCodeUrlRequest)` can be used to create the
      URL for the first step of OAuth2.0

      Authorization Code flow. Ensure that values for redirectUri and scopes in
      AuthorizationCodeUrlRequest and

      AuthorizationCodeRequest are the same.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenByCode(request: AuthorizationCodeRequest,
        authCodePayLoad?: AuthorizationCodePayload):
        Promise<AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.AuthorizationCodeRequest" />
          description: ''
        - id: authCodePayLoad
          type: <xref uid="@azure/msal-node.AuthorizationCodePayload" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/msal-node.AuthenticationResult" />&gt;
  - name: acquireTokenByRefreshToken(RefreshTokenRequest)
    uid: '@azure/msal-node.ClientApplication.acquireTokenByRefreshToken'
    package: '@azure/msal-node'
    summary: >-
      Acquires a token by exchanging the refresh token provided for a new set of
      tokens.


      This API is provided only for scenarios where you would like to migrate
      from ADAL to MSAL. Otherwise, it is

      recommended that you use `acquireTokenSilent()` for silent scenarios. When
      using `acquireTokenSilent()`, MSAL will

      handle the caching and refreshing of tokens automatically.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenByRefreshToken(request: RefreshTokenRequest):
        Promise<null | AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.RefreshTokenRequest" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;null | <xref uid="@azure/msal-node.AuthenticationResult"
          />&gt;
  - name: acquireTokenByUsernamePassword(UsernamePasswordRequest)
    uid: '@azure/msal-node.ClientApplication.acquireTokenByUsernamePassword'
    package: '@azure/msal-node'
    summary: >-
      Acquires tokens with password grant by exchanging client applications
      username and password for credentials


      The latest OAuth 2.0 Security Best Current Practice disallows the password
      grant entirely.

      More details on this recommendation at
      https://tools.ietf.org/html/draft-ietf-oauth-security-topics-13#section-3.4

      Microsoft's documentation and recommendations are at:

      https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-authentication-flows#usernamepassword
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: '- Use a more secure flow instead'
    syntax:
      content: >-
        function acquireTokenByUsernamePassword(request:
        UsernamePasswordRequest): Promise<null | AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.UsernamePasswordRequest" />
          description: UsenamePasswordRequest
      return:
        description: ''
        type: >-
          Promise&lt;null | <xref uid="@azure/msal-node.AuthenticationResult"
          />&gt;
  - name: acquireTokenSilent(SilentFlowRequest)
    uid: '@azure/msal-node.ClientApplication.acquireTokenSilent'
    package: '@azure/msal-node'
    summary: >-
      Acquires a token silently when a user specifies the account the token is
      requested for.


      This API expects the user to provide an account object and looks into the
      cache to retrieve the token if present.

      There is also an optional "forceRefresh" boolean the user can send to
      bypass the cache for access_token and id_token.

      In case the refresh_token is expired or not found, an error is thrown

      and the guidance is for the user to call any interactive token acquisition
      API (eg: `acquireTokenByCode()`).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenSilent(request: SilentFlowRequest):
        Promise<AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.SilentFlowRequest" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/msal-node.AuthenticationResult" />&gt;
  - name: clearCache()
    uid: '@azure/msal-node.ClientApplication.clearCache'
    package: '@azure/msal-node'
    summary: Clear the cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: function clearCache()
  - name: getAuthCodeUrl(AuthorizationUrlRequest)
    uid: '@azure/msal-node.ClientApplication.getAuthCodeUrl'
    package: '@azure/msal-node'
    summary: >-
      Creates the URL of the authorization request, letting the user input
      credentials and consent to the

      application. The URL targets the /authorize endpoint of the authority
      configured in the

      application object.


      Once the user inputs their credentials and consents, the authority will
      send a response to the redirect URI

      sent in the request and should contain an authorization code, which can
      then be used to acquire tokens via

      `acquireTokenByCode(AuthorizationCodeRequest)`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAuthCodeUrl(request: AuthorizationUrlRequest):
        Promise<string>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.AuthorizationUrlRequest" />
          description: ''
      return:
        description: ''
        type: Promise&lt;string&gt;
  - name: getLogger()
    uid: '@azure/msal-node.ClientApplication.getLogger'
    package: '@azure/msal-node'
    summary: Returns the logger instance
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getLogger(): Logger'
      return:
        description: ''
        type: <xref uid="@azure/msal-node.Logger" />
  - name: getTokenCache()
    uid: '@azure/msal-node.ClientApplication.getTokenCache'
    package: '@azure/msal-node'
    summary: Gets the token cache for the application.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getTokenCache(): TokenCache'
      return:
        description: ''
        type: <xref uid="@azure/msal-node.TokenCache" />
  - name: setLogger(Logger)
    uid: '@azure/msal-node.ClientApplication.setLogger'
    package: '@azure/msal-node'
    summary: >-
      Replaces the default logger set in configurations with new Logger with new
      configurations
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setLogger(logger: Logger)'
      parameters:
        - id: logger
          type: <xref uid="@azure/msal-node.Logger" />
          description: Logger instance
