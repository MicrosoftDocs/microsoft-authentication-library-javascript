### YamlMime:TSType
name: IConfidentialClientApplication
uid: '@azure/msal-node.IConfidentialClientApplication'
package: '@azure/msal-node'
summary: >-
  Interface for the ConfidentialClientApplication class defining the public API
  signatures
fullName: IConfidentialClientApplication
remarks: ''
isDeprecated: false
type: interface
methods:
  - name: acquireTokenByClientCredential(ClientCredentialRequest)
    uid: >-
      @azure/msal-node.IConfidentialClientApplication.acquireTokenByClientCredential
    package: '@azure/msal-node'
    summary: >-
      Acquires tokens from the authority for the application (not for an end
      user)
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenByClientCredential(request:
        ClientCredentialRequest): Promise<null | AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.ClientCredentialRequest" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;null | <xref uid="@azure/msal-node.AuthenticationResult"
          />&gt;
  - name: acquireTokenByCode(AuthorizationCodeRequest)
    uid: '@azure/msal-node.IConfidentialClientApplication.acquireTokenByCode'
    package: '@azure/msal-node'
    summary: >-
      Acquires a token by exchanging the authorization code received from the
      first step of OAuth 2.0 Authorization Code Flow
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenByCode(request: AuthorizationCodeRequest):
        Promise<AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.AuthorizationCodeRequest" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/msal-node.AuthenticationResult" />&gt;
  - name: acquireTokenByRefreshToken(RefreshTokenRequest)
    uid: '@azure/msal-node.IConfidentialClientApplication.acquireTokenByRefreshToken'
    package: '@azure/msal-node'
    summary: >-
      Acquires a token by exchanging the refresh token provided for a new set of
      tokens
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenByRefreshToken(request: RefreshTokenRequest):
        Promise<null | AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.RefreshTokenRequest" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;null | <xref uid="@azure/msal-node.AuthenticationResult"
          />&gt;
  - name: acquireTokenByUsernamePassword(UsernamePasswordRequest)
    uid: >-
      @azure/msal-node.IConfidentialClientApplication.acquireTokenByUsernamePassword
    package: '@azure/msal-node'
    summary: >-
      Acquires tokens with password grant by exchanging client applications
      username and password for credentials
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: '- Use a more secure flow instead'
    syntax:
      content: >-
        function acquireTokenByUsernamePassword(request:
        UsernamePasswordRequest): Promise<null | AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.UsernamePasswordRequest" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;null | <xref uid="@azure/msal-node.AuthenticationResult"
          />&gt;
  - name: acquireTokenOnBehalfOf(OnBehalfOfRequest)
    uid: '@azure/msal-node.IConfidentialClientApplication.acquireTokenOnBehalfOf'
    package: '@azure/msal-node'
    summary: Acquires tokens from the authority for the application
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenOnBehalfOf(request: OnBehalfOfRequest):
        Promise<null | AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.OnBehalfOfRequest" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;null | <xref uid="@azure/msal-node.AuthenticationResult"
          />&gt;
  - name: acquireTokenSilent(SilentFlowRequest)
    uid: '@azure/msal-node.IConfidentialClientApplication.acquireTokenSilent'
    package: '@azure/msal-node'
    summary: >-
      Acquires a token silently when a user specifies the account the token is
      requested for
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenSilent(request: SilentFlowRequest): Promise<null |
        AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.SilentFlowRequest" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;null | <xref uid="@azure/msal-node.AuthenticationResult"
          />&gt;
  - name: clearCache()
    uid: '@azure/msal-node.IConfidentialClientApplication.clearCache'
    package: '@azure/msal-node'
    summary: Clear the cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: function clearCache()
  - name: getAuthCodeUrl(AuthorizationUrlRequest)
    uid: '@azure/msal-node.IConfidentialClientApplication.getAuthCodeUrl'
    package: '@azure/msal-node'
    summary: Creates the URL of the authorization request
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAuthCodeUrl(request: AuthorizationUrlRequest):
        Promise<string>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-node.AuthorizationUrlRequest" />
          description: ''
      return:
        description: ''
        type: Promise&lt;string&gt;
  - name: getLogger()
    uid: '@azure/msal-node.IConfidentialClientApplication.getLogger'
    package: '@azure/msal-node'
    summary: Returns the logger instance
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getLogger(): Logger'
      return:
        description: ''
        type: <xref uid="@azure/msal-node.Logger" />
  - name: getTokenCache()
    uid: '@azure/msal-node.IConfidentialClientApplication.getTokenCache'
    package: '@azure/msal-node'
    summary: Gets the token cache for the application
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getTokenCache(): TokenCache'
      return:
        description: ''
        type: <xref uid="@azure/msal-node.TokenCache" />
  - name: SetAppTokenProvider(IAppTokenProvider)
    uid: '@azure/msal-node.IConfidentialClientApplication.SetAppTokenProvider'
    package: '@azure/msal-node'
    summary: >-
      This extensibility point is meant for Azure SDK to enhance Managed
      Identity support
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function SetAppTokenProvider(provider: IAppTokenProvider)'
      parameters:
        - id: provider
          type: <xref uid="@azure/msal-node.IAppTokenProvider" />
          description: ''
  - name: setLogger(Logger)
    uid: '@azure/msal-node.IConfidentialClientApplication.setLogger'
    package: '@azure/msal-node'
    summary: >-
      Replaces the default logger set in configurations with new Logger with new
      configurations
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setLogger(logger: Logger)'
      parameters:
        - id: logger
          type: <xref uid="@azure/msal-node.Logger" />
          description: ''
