### YamlMime:TSType
name: PublicClientNext
uid: '@azure/msal-browser.PublicClientNext'
package: '@azure/msal-browser'
summary: >-
  PublicClientNext is an early look at the planned implementation of
  PublicClientApplication in the next major version of MSAL.js.

  It contains support for multiple API implementations based on the runtime
  environment that it is running in.


  The goals of these changes are to provide a clean separation of behavior
  between different operating contexts (Nested App Auth, Platform Brokers, Plain
  old Browser, etc.)

  while still providing a consistent API surface for developers.


  Please use PublicClientApplication for any prod/real-world scenarios.

  Note: PublicClientNext is experimental and subject to breaking changes without
  following semver
fullName: PublicClientNext
remarks: ''
isDeprecated: false
type: class
methods:
  - name: acquireTokenByCode(AuthorizationCodeRequest)
    uid: '@azure/msal-browser.PublicClientNext.acquireTokenByCode'
    package: '@azure/msal-browser'
    summary: >-
      This function redeems an authorization code (passed as code) from the eSTS
      token endpoint.

      This authorization code should be acquired server-side using a
      confidential client to acquire a spa_code.

      This API is not indended for normal authorization code acquisition and
      redemption.


      Redemption of this authorization code will not require PKCE, as it was
      acquired by a confidential client.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenByCode(request: AuthorizationCodeRequest):
        Promise<AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-browser.AuthorizationCodeRequest" />
          description: >-
            [AuthorizationCodeRequest](xref:@azure/msal-browser.AuthorizationCodeRequest)
      return:
        description: >-
          A promise that is fulfilled when this function has completed, or
          rejected if an error was raised.
        type: Promise&lt;<xref uid="@azure/msal-browser.AuthenticationResult" />&gt;
  - name: acquireTokenPopup(PopupRequest)
    uid: '@azure/msal-browser.PublicClientNext.acquireTokenPopup'
    package: '@azure/msal-browser'
    summary: >-
      Use when you want to obtain an access_token for your API via opening a
      popup window in the user's browser
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenPopup(request: PopupRequest):
        Promise<AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-browser.PopupRequest" />
          description: ''
      return:
        description: >-
          A promise that is fulfilled when this function has completed, or
          rejected if an error was raised.
        type: Promise&lt;<xref uid="@azure/msal-browser.AuthenticationResult" />&gt;
  - name: acquireTokenRedirect(RedirectRequest)
    uid: '@azure/msal-browser.PublicClientNext.acquireTokenRedirect'
    package: '@azure/msal-browser'
    summary: >-
      Use when you want to obtain an access_token for your API by redirecting
      the user's browser window to the authorization endpoint. This function
      redirects

      the page, so any code that follows this function will not execute.


      IMPORTANT: It is NOT recommended to have code that is dependent on the
      resolution of the Promise. This function will navigate away from the
      current

      browser window. It currently returns a Promise in order to reflect the
      asynchronous nature of the code running in this function.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function acquireTokenRedirect(request: RedirectRequest): Promise<void>'
      parameters:
        - id: request
          type: <xref uid="@azure/msal-browser.RedirectRequest" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: acquireTokenSilent(SilentRequest)
    uid: '@azure/msal-browser.PublicClientNext.acquireTokenSilent'
    package: '@azure/msal-browser'
    summary: >-
      Silently acquire an access token for a given set of scopes. Returns
      currently processing promise if parallel requests are made.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenSilent(silentRequest: SilentRequest):
        Promise<AuthenticationResult>
      parameters:
        - id: silentRequest
          type: <xref uid="@azure/msal-browser.SilentRequest" />
          description: ''
      return:
        description: >-
          - a promise that is fulfilled when this function has completed, or
          rejected if an error was raised. Returns the
          [AuthenticationResult](xref:@azure/msal-browser.AuthenticationResult)
          object
        type: Promise&lt;<xref uid="@azure/msal-browser.AuthenticationResult" />&gt;
  - name: addEventCallback(EventCallbackFunction, EventType[])
    uid: '@azure/msal-browser.PublicClientNext.addEventCallback'
    package: '@azure/msal-browser'
    summary: Adds event callbacks to array
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addEventCallback(callback: EventCallbackFunction, eventTypes?:
        EventType[]): null | string
      parameters:
        - id: callback
          type: <xref uid="@azure/msal-browser.EventCallbackFunction" />
          description: ''
        - id: eventTypes
          type: EventType[]
          description: ''
      return:
        description: ''
        type: null | string
  - name: addPerformanceCallback(PerformanceCallbackFunction)
    uid: '@azure/msal-browser.PublicClientNext.addPerformanceCallback'
    package: '@azure/msal-browser'
    summary: Registers a callback to receive performance events.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addPerformanceCallback(callback: PerformanceCallbackFunction):
        string
      parameters:
        - id: callback
          type: <xref uid="@azure/msal-browser.PerformanceCallbackFunction" />
          description: ''
      return:
        description: ''
        type: string
  - name: clearCache(ClearCacheRequest)
    uid: '@azure/msal-browser.PublicClientNext.clearCache'
    package: '@azure/msal-browser'
    summary: Clears tokens and account from the browser cache.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function clearCache(logoutRequest?: ClearCacheRequest): Promise<void>'
      parameters:
        - id: logoutRequest
          type: <xref uid="@azure/msal-browser.ClearCacheRequest" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: createPublicClientApplication(Configuration)
    uid: '@azure/msal-browser.PublicClientNext.createPublicClientApplication'
    package: '@azure/msal-browser'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function createPublicClientApplication(configuration:
        Configuration): Promise<IPublicClientApplication>
      parameters:
        - id: configuration
          type: <xref uid="@azure/msal-browser.Configuration" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/msal-browser.IPublicClientApplication"
          />&gt;
  - name: disableAccountStorageEvents()
    uid: '@azure/msal-browser.PublicClientNext.disableAccountStorageEvents'
    package: '@azure/msal-browser'
    summary: >-
      Removes event listener that emits an event when a user account is added or
      removed from localstorage in a different browser tab or window
    remarks: ''
    isDeprecated: false
    syntax:
      content: function disableAccountStorageEvents()
  - name: enableAccountStorageEvents()
    uid: '@azure/msal-browser.PublicClientNext.enableAccountStorageEvents'
    package: '@azure/msal-browser'
    summary: >-
      Adds event listener that emits an event when a user account is added or
      removed from localstorage in a different browser tab or window
    remarks: ''
    isDeprecated: false
    syntax:
      content: function enableAccountStorageEvents()
  - name: getAccount(AccountFilter)
    uid: '@azure/msal-browser.PublicClientNext.getAccount'
    package: '@azure/msal-browser'
    summary: >-
      Returns the first account found in the cache that matches the account
      filter passed in.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getAccount(accountFilter: AccountFilter): null | AccountInfo'
      parameters:
        - id: accountFilter
          type: <xref uid="@azure/msal-common.AccountFilter" />
          description: ''
      return:
        description: >-
          The first account found in the cache matching the provided filter or
          null if no account could be found.
        type: null | <xref uid="@azure/msal-browser.AccountInfo" />
  - name: getAccountByHomeId(string)
    uid: '@azure/msal-browser.PublicClientNext.getAccountByHomeId'
    package: '@azure/msal-browser'
    summary: |-
      Returns the signed in account matching homeAccountId.
      (the account object is created at the time of successful login)
      or null when no matching account is found
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: '- Use getAccount instead'
    syntax:
      content: 'function getAccountByHomeId(homeAccountId: string): null | AccountInfo'
      parameters:
        - id: homeAccountId
          type: string
          description: ''
      return:
        description: The account object stored in MSAL
        type: null | <xref uid="@azure/msal-browser.AccountInfo" />
  - name: getAccountByLocalId(string)
    uid: '@azure/msal-browser.PublicClientNext.getAccountByLocalId'
    package: '@azure/msal-browser'
    summary: |-
      Returns the signed in account matching localAccountId.
      (the account object is created at the time of successful login)
      or null when no matching account is found
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: '- Use getAccount instead'
    syntax:
      content: 'function getAccountByLocalId(localId: string): null | AccountInfo'
      parameters:
        - id: localId
          type: string
          description: ''
      return:
        description: The account object stored in MSAL
        type: null | <xref uid="@azure/msal-browser.AccountInfo" />
  - name: getAccountByUsername(string)
    uid: '@azure/msal-browser.PublicClientNext.getAccountByUsername'
    package: '@azure/msal-browser'
    summary: >-
      Returns the signed in account matching username.

      (the account object is created at the time of successful login)

      or null when no matching account is found.

      This API is provided for convenience but getAccountById should be used for
      best reliability
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: '- Use getAccount instead'
    syntax:
      content: 'function getAccountByUsername(userName: string): null | AccountInfo'
      parameters:
        - id: userName
          type: string
          description: ''
      return:
        description: The account object stored in MSAL
        type: null | <xref uid="@azure/msal-browser.AccountInfo" />
  - name: getActiveAccount()
    uid: '@azure/msal-browser.PublicClientNext.getActiveAccount'
    package: '@azure/msal-browser'
    summary: Gets the currently active account
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getActiveAccount(): null | AccountInfo'
      return:
        description: ''
        type: null | <xref uid="@azure/msal-browser.AccountInfo" />
  - name: getAllAccounts(AccountFilter)
    uid: '@azure/msal-browser.PublicClientNext.getAllAccounts'
    package: '@azure/msal-browser'
    summary: >-
      Returns all the accounts in the cache that match the optional filter. If
      no filter is provided, all accounts are returned.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getAllAccounts(accountFilter?: AccountFilter): AccountInfo[]'
      parameters:
        - id: accountFilter
          type: <xref uid="@azure/msal-common.AccountFilter" />
          description: (Optional) filter to narrow down the accounts returned
      return:
        description: Array of AccountInfo objects in cache
        type: <xref uid="@azure/msal-browser.AccountInfo" />[]
  - name: getLogger()
    uid: '@azure/msal-browser.PublicClientNext.getLogger'
    package: '@azure/msal-browser'
    summary: Returns the logger instance
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getLogger(): Logger'
      return:
        description: ''
        type: <xref uid="@azure/msal-browser.Logger" />
  - name: getTokenCache()
    uid: '@azure/msal-browser.PublicClientNext.getTokenCache'
    package: '@azure/msal-browser'
    summary: Gets the token cache for the application.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getTokenCache(): ITokenCache'
      return:
        description: ''
        type: <xref uid="@azure/msal-browser.ITokenCache" />
  - name: handleRedirectPromise(string)
    uid: '@azure/msal-browser.PublicClientNext.handleRedirectPromise'
    package: '@azure/msal-browser'
    summary: >-
      Event handler function which allows users to fire events after the
      PublicClientApplication object

      has loaded during redirect flows. This should be invoked on all page loads
      involved in redirect

      auth flows.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function handleRedirectPromise(hash?: string): Promise<null |
        AuthenticationResult>
      parameters:
        - id: hash
          type: string
          description: >-
            Hash to process. Defaults to the current value of
            window.location.hash. Only needs to be provided explicitly if the
            response to be handled is not contained in the current value.
      return:
        description: >-
          Token response or null. If the return value is null, then no auth
          redirect was detected.
        type: >-
          Promise&lt;null | <xref uid="@azure/msal-browser.AuthenticationResult"
          />&gt;
  - name: >-
      hydrateCache(AuthenticationResult, PopupRequest | RedirectRequest |
      SilentRequest | Partial<Omit<CommonAuthorizationUrlRequest, "responseMode"
      | "earJwk" | "codeChallenge" | "codeChallengeMethod" |
      "requestedClaimsHash" | "platformBroker">>)
    uid: '@azure/msal-browser.PublicClientNext.hydrateCache'
    package: '@azure/msal-browser'
    summary: >-
      Hydrates cache with the tokens and account in the AuthenticationResult
      object
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function hydrateCache(result: AuthenticationResult, request:
        PopupRequest | RedirectRequest | SilentRequest |
        Partial<Omit<CommonAuthorizationUrlRequest, "responseMode" | "earJwk" |
        "codeChallenge" | "codeChallengeMethod" | "requestedClaimsHash" |
        "platformBroker">>): Promise<void>
      parameters:
        - id: result
          type: <xref uid="@azure/msal-browser.AuthenticationResult" />
          description: ''
        - id: request
          type: >-
            <xref uid="@azure/msal-browser.PopupRequest" /> | <xref
            uid="@azure/msal-browser.RedirectRequest" /> | <xref
            uid="@azure/msal-browser.SilentRequest" /> |
            Partial&lt;Omit&lt;<xref
            uid="@azure/msal-common.CommonAuthorizationUrlRequest" />,
            "responseMode" | "earJwk" | "codeChallenge" | "codeChallengeMethod"
            | "requestedClaimsHash" | "platformBroker"&gt;&gt;
          description: The request object that was used to obtain the AuthenticationResult
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: initialize()
    uid: '@azure/msal-browser.PublicClientNext.initialize'
    package: '@azure/msal-browser'
    summary: >-
      Initializer function to perform async startup tasks such as connecting to
      WAM extension
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function initialize(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: initializeWrapperLibrary(WrapperSKU, string)
    uid: '@azure/msal-browser.PublicClientNext.initializeWrapperLibrary'
    package: '@azure/msal-browser'
    summary: >-
      Called by wrapper libraries (Angular & React) to set SKU and Version
      passed down to telemetry, logger, etc.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function initializeWrapperLibrary(sku: WrapperSKU, version: string)'
      parameters:
        - id: sku
          type: WrapperSKU
          description: ''
        - id: version
          type: string
          description: ''
  - name: loginPopup(PopupRequest)
    uid: '@azure/msal-browser.PublicClientNext.loginPopup'
    package: '@azure/msal-browser'
    summary: >-
      Use when initiating the login process via opening a popup window in the
      user's browser
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginPopup(request?: PopupRequest):
        Promise<AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-browser.PopupRequest" />
          description: ''
      return:
        description: >-
          A promise that is fulfilled when this function has completed, or
          rejected if an error was raised.
        type: Promise&lt;<xref uid="@azure/msal-browser.AuthenticationResult" />&gt;
  - name: loginRedirect(RedirectRequest)
    uid: '@azure/msal-browser.PublicClientNext.loginRedirect'
    package: '@azure/msal-browser'
    summary: >-
      Use when initiating the login process by redirecting the user's browser to
      the authorization endpoint. This function redirects the page, so

      any code that follows this function will not execute.


      IMPORTANT: It is NOT recommended to have code that is dependent on the
      resolution of the Promise. This function will navigate away from the
      current

      browser window. It currently returns a Promise in order to reflect the
      asynchronous nature of the code running in this function.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function loginRedirect(request?: RedirectRequest): Promise<void>'
      parameters:
        - id: request
          type: <xref uid="@azure/msal-browser.RedirectRequest" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: logout(EndSessionRequest)
    uid: '@azure/msal-browser.PublicClientNext.logout'
    package: '@azure/msal-browser'
    summary: Deprecated logout function. Use logoutRedirect or logoutPopup instead
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: ''
    syntax:
      content: 'function logout(logoutRequest?: EndSessionRequest): Promise<void>'
      parameters:
        - id: logoutRequest
          type: <xref uid="@azure/msal-browser.EndSessionRequest" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: logoutPopup(EndSessionRequest)
    uid: '@azure/msal-browser.PublicClientNext.logoutPopup'
    package: '@azure/msal-browser'
    summary: >-
      Clears local cache for the current user then opens a popup window
      prompting the user to sign-out of the server
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function logoutPopup(logoutRequest?: EndSessionRequest): Promise<void>'
      parameters:
        - id: logoutRequest
          type: <xref uid="@azure/msal-browser.EndSessionRequest" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: logoutRedirect(EndSessionRequest)
    uid: '@azure/msal-browser.PublicClientNext.logoutRedirect'
    package: '@azure/msal-browser'
    summary: >-
      Use to log out the current user, and redirect the user to the
      postLogoutRedirectUri.

      Default behaviour is to redirect the user to `window.location.href`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function logoutRedirect(logoutRequest?: EndSessionRequest):
        Promise<void>
      parameters:
        - id: logoutRequest
          type: <xref uid="@azure/msal-browser.EndSessionRequest" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: removeEventCallback(string)
    uid: '@azure/msal-browser.PublicClientNext.removeEventCallback'
    package: '@azure/msal-browser'
    summary: Removes callback with provided id from callback array
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeEventCallback(callbackId: string)'
      parameters:
        - id: callbackId
          type: string
          description: ''
  - name: removePerformanceCallback(string)
    uid: '@azure/msal-browser.PublicClientNext.removePerformanceCallback'
    package: '@azure/msal-browser'
    summary: Removes a callback registered with addPerformanceCallback.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removePerformanceCallback(callbackId: string): boolean'
      parameters:
        - id: callbackId
          type: string
          description: ''
      return:
        description: ''
        type: boolean
  - name: setActiveAccount(null | AccountInfo)
    uid: '@azure/msal-browser.PublicClientNext.setActiveAccount'
    package: '@azure/msal-browser'
    summary: >-
      Sets the account to use as the active account. If no account is passed to
      the acquireToken APIs, then MSAL will use this active account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setActiveAccount(account: null | AccountInfo)'
      parameters:
        - id: account
          type: null | <xref uid="@azure/msal-browser.AccountInfo" />
          description: ''
  - name: setLogger(Logger)
    uid: '@azure/msal-browser.PublicClientNext.setLogger'
    package: '@azure/msal-browser'
    summary: >-
      Replaces the default logger set in configurations with new Logger with new
      configurations
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setLogger(logger: Logger)'
      parameters:
        - id: logger
          type: <xref uid="@azure/msal-browser.Logger" />
          description: Logger instance
  - name: setNavigationClient(INavigationClient)
    uid: '@azure/msal-browser.PublicClientNext.setNavigationClient'
    package: '@azure/msal-browser'
    summary: Sets navigation client
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setNavigationClient(navigationClient: INavigationClient)'
      parameters:
        - id: navigationClient
          type: <xref uid="@azure/msal-browser.INavigationClient" />
          description: ''
  - name: >-
      ssoSilent(Partial<Omit<CommonAuthorizationUrlRequest, "responseMode" |
      "earJwk" | "codeChallenge" | "codeChallengeMethod" | "requestedClaimsHash"
      | "platformBroker">>)
    uid: '@azure/msal-browser.PublicClientNext.ssoSilent'
    package: '@azure/msal-browser'
    summary: >-
      This function uses a hidden iframe to fetch an authorization code from the
      eSTS. There are cases where this may not work:

      - Any browser using a form of Intelligent Tracking Prevention

      - If there is not an established session with the service


      In these cases, the request must be done inside a popup or full frame
      redirect.


      For the cases where interaction is required, you cannot send a request
      with prompt=none.


      If your refresh token has expired, you can use this function to fetch a
      new set of tokens silently as long as

      you session on the server still exists.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function ssoSilent(request: Partial<Omit<CommonAuthorizationUrlRequest,
        "responseMode" | "earJwk" | "codeChallenge" | "codeChallengeMethod" |
        "requestedClaimsHash" | "platformBroker">>):
        Promise<AuthenticationResult>
      parameters:
        - id: request
          type: >-
            Partial&lt;Omit&lt;<xref
            uid="@azure/msal-common.CommonAuthorizationUrlRequest" />,
            "responseMode" | "earJwk" | "codeChallenge" | "codeChallengeMethod"
            | "requestedClaimsHash" | "platformBroker"&gt;&gt;
          description: '[SsoSilentRequest](xref:@azure/msal-browser.SsoSilentRequest)'
      return:
        description: >-
          A promise that is fulfilled when this function has completed, or
          rejected if an error was raised.
        type: Promise&lt;<xref uid="@azure/msal-browser.AuthenticationResult" />&gt;
